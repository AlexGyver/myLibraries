#ifndef iarduino_RF433_Receiver_h
#define iarduino_RF433_Receiver_h

#if defined(ARDUINO) && (ARDUINO >= 100)
#include <Arduino.h>
#else
#include <WProgram.h>
#endif

#define i433_5KBPS 5000
#define i433_4KBPS 4000
#define i433_3KBPS 3000
#define i433_2KBPS 2000
#define i433_1KBPS 1000
#define i433_500BPS 500
#define i433_100BPS 100

class iarduino_RF433_Receiver{
	public:			iarduino_RF433_Receiver	(uint8_t=2);						//	Объявление	экземпляра класса					([№ вывода, к которому подключён приёмник])
	/**	пользовательские функции **/
		void		begin					(uint16_t=i433_2KBPS);				//	Инициируем	работу с приёмником					([скорость приёма данных])
		void		setDataRate				(uint16_t);							//	Указываем	скорость передачи данных			(i433_5KBPS, i433_4KBPS, i433_3KBPS, i433_2KBPS, i433_1KBPS, i433_500BPS, i433_100BPS)
		void		openReadingPipe			(uint8_t=8);						//	Открываем	трубу								([номер трубы]) если не указывать номер, то откроются все трубы
		void		closeReadingPipe		(uint8_t=8);						//	Закрываем	трубу								([номер трубы]) если не указывать номер, то закроются все трубы
		void		startListening			(void);								//	Включаем	приемник, начинаем прослушивание	(без параметров)
		void		stopListening			(void);								//	Выключаем	приёмник, завершаем прослушивание	(без параметров)
		bool		available				(void);								//	Узнаём		имеются ли принятые данные			(без параметров)
		bool		available				(uint8_t*);							//	Узнаём		имеются ли принятые данные			(указатель на переменную в которую будет помещён номер трубы, по которой приняты данные)
		void		read					(void*, uint8_t);					//	Читаем		полученные данные в массив			(указатель на массив для получения данных, длинна массива)
	private:
	/**	внутренние переменные **/
		uint16_t	i433_time_RATE;												//	Скорость	передачи данных						(количество микросекунд в 1 полубите)
};

class iarduino_RF433_Receiver_volatile_class{
	public:
		uint16_t	i433_time_RATE[5];											//	скорость	количество микросекунд 				(в половине полубита, в 1 полубите, в 2 полубитах, в 3 полубитах, в 4 полубитах)
		uint8_t		i433_pins_INPUT			=	2;								//	вывод		к которому подключен приёмник		(по умолчанию 2)
		uint8_t		i433_ints_IRQ			=	0;								//	номер		внешнего прерывания					(по умолчанию 0)
		uint8_t		i433_summ_Byte			=	0;								//	количество	принятых полных байт				(находящихся в массиве i433_data_Byte)
		uint8_t		i433_summ_Bits			=	0;								//	количество	принятых бит						(не попавших в байты)
		uint8_t		i433_summ_ByteStated	=	0;								//	количество	заявленных полных байт				(ожидаемое количество байт в пакете)
		uint8_t		i433_data_Byte[35];											//	массив		приянтых байт						(буффер)
		uint8_t		i433_data_ByteRead[35];										//	массив		приянтых байт						(доступных для чтения функцией read)
		uint8_t		i433_data_Read			=	0;								//	количество	байт доступных для чтения			(устанавливается при получении полного пакета, сбрасывается в 0 после обращения к функции read)
		uint32_t	i433_time_PrevIRQ		=	0;								//	время		прерывания							(предыдущего)
		uint32_t	i433_time_ThisIRQ		=	0;								//	время		прерывания							(текущего)
		uint16_t	i433_time_Duration		=	0;								//	время		прошедшее между прерываниями		(текущим и предыдущим)
		uint16_t	i433_time_Aliquot		=	0;								//	время		прошедшее между прерываниями		(кратное полубиту: 1-полубит, 2-двойной полубит, 3-стартовый полубит, 4-стартовый полубит и полубит данных)
		bool		i433_bits_Value			=	0;								//	уровень		полубита							(завершение которого вызвало прерывание)
		bool		i433_flas_Start			=	0;								//	флаг		фиксации 1 стартового полубита		(начало нового пакета)
		bool		i433_flas_Data			=	0;								//	флаг		необходимости записывать данные		(приняты оба стартовых полубита)
		bool		i433_bits_Prev			=	0;								//	уровень		предыдущего полубита				(первый полубит принимаемого бита, соответствует значению этого бита)
		bool		i433_flas_Prev			=	0;								//	флаг		валидности предыдущего полубита		(означает о том что принятый полубит является вторым в принимаемом бите)
		uint8_t		i433_flag_ADDR			=	0;								//	флаги		адресов труб для прослушивания		(каждый бит является флагом, например 0b00010001 => 4 и 0 трубы)
		bool		i433_flag_Read			=	0;								//	флаг		надичия данных для чтения			(устанавливается при получении полного пакета, сбрасывается при чтении пакета)
};

#endif
